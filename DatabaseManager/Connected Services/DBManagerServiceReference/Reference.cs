//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseManager.DBManagerServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tag", Namespace="http://schemas.datacontract.org/2004/07/CoreService")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.DBManagerServiceReference.InputTag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.DBManagerServiceReference.AnalogInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.DBManagerServiceReference.DigitalInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.DBManagerServiceReference.OutputTag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.DBManagerServiceReference.AnalogOutput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.DBManagerServiceReference.DigitalOutput))]
    public partial class Tag : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IOAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IOAddress {
            get {
                return this.IOAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IOAddressField, value) != true)) {
                    this.IOAddressField = value;
                    this.RaisePropertyChanged("IOAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InputTag", Namespace="http://schemas.datacontract.org/2004/07/CoreService")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.DBManagerServiceReference.AnalogInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.DBManagerServiceReference.DigitalInput))]
    public partial class InputTag : DatabaseManager.DBManagerServiceReference.Tag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseManager.DBManagerServiceReference.InputDriver DriverField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ScanActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScanTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseManager.DBManagerServiceReference.InputDriver Driver {
            get {
                return this.DriverField;
            }
            set {
                if ((object.ReferenceEquals(this.DriverField, value) != true)) {
                    this.DriverField = value;
                    this.RaisePropertyChanged("Driver");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ScanActive {
            get {
                return this.ScanActiveField;
            }
            set {
                if ((this.ScanActiveField.Equals(value) != true)) {
                    this.ScanActiveField = value;
                    this.RaisePropertyChanged("ScanActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ScanTime {
            get {
                return this.ScanTimeField;
            }
            set {
                if ((this.ScanTimeField.Equals(value) != true)) {
                    this.ScanTimeField = value;
                    this.RaisePropertyChanged("ScanTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnalogInput", Namespace="http://schemas.datacontract.org/2004/07/CoreService")]
    [System.SerializableAttribute()]
    public partial class AnalogInput : DatabaseManager.DBManagerServiceReference.InputTag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseManager.DBManagerServiceReference.Alarm[] AlarmsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HighLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LowLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseManager.DBManagerServiceReference.Alarm[] Alarms {
            get {
                return this.AlarmsField;
            }
            set {
                if ((object.ReferenceEquals(this.AlarmsField, value) != true)) {
                    this.AlarmsField = value;
                    this.RaisePropertyChanged("Alarms");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HighLimit {
            get {
                return this.HighLimitField;
            }
            set {
                if ((this.HighLimitField.Equals(value) != true)) {
                    this.HighLimitField = value;
                    this.RaisePropertyChanged("HighLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LowLimit {
            get {
                return this.LowLimitField;
            }
            set {
                if ((this.LowLimitField.Equals(value) != true)) {
                    this.LowLimitField = value;
                    this.RaisePropertyChanged("LowLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Units {
            get {
                return this.UnitsField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitsField, value) != true)) {
                    this.UnitsField = value;
                    this.RaisePropertyChanged("Units");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DigitalInput", Namespace="http://schemas.datacontract.org/2004/07/CoreService")]
    [System.SerializableAttribute()]
    public partial class DigitalInput : DatabaseManager.DBManagerServiceReference.InputTag {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OutputTag", Namespace="http://schemas.datacontract.org/2004/07/CoreService")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.DBManagerServiceReference.AnalogOutput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.DBManagerServiceReference.DigitalOutput))]
    public partial class OutputTag : DatabaseManager.DBManagerServiceReference.Tag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float InitialValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float InitialValue {
            get {
                return this.InitialValueField;
            }
            set {
                if ((this.InitialValueField.Equals(value) != true)) {
                    this.InitialValueField = value;
                    this.RaisePropertyChanged("InitialValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnalogOutput", Namespace="http://schemas.datacontract.org/2004/07/CoreService")]
    [System.SerializableAttribute()]
    public partial class AnalogOutput : DatabaseManager.DBManagerServiceReference.OutputTag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float HighLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float LowLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float HighLimit {
            get {
                return this.HighLimitField;
            }
            set {
                if ((this.HighLimitField.Equals(value) != true)) {
                    this.HighLimitField = value;
                    this.RaisePropertyChanged("HighLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float LowLimit {
            get {
                return this.LowLimitField;
            }
            set {
                if ((this.LowLimitField.Equals(value) != true)) {
                    this.LowLimitField = value;
                    this.RaisePropertyChanged("LowLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Units {
            get {
                return this.UnitsField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitsField, value) != true)) {
                    this.UnitsField = value;
                    this.RaisePropertyChanged("Units");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DigitalOutput", Namespace="http://schemas.datacontract.org/2004/07/CoreService")]
    [System.SerializableAttribute()]
    public partial class DigitalOutput : DatabaseManager.DBManagerServiceReference.OutputTag {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InputDriver", Namespace="http://schemas.datacontract.org/2004/07/CoreService")]
    [System.SerializableAttribute()]
    public partial class InputDriver : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Alarm", Namespace="http://schemas.datacontract.org/2004/07/CoreService")]
    [System.SerializableAttribute()]
    public partial class Alarm : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AlarmMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseManager.DBManagerServiceReference.AlarmPriority PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ProcessedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlarmMessage {
            get {
                return this.AlarmMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.AlarmMessageField, value) != true)) {
                    this.AlarmMessageField = value;
                    this.RaisePropertyChanged("AlarmMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseManager.DBManagerServiceReference.AlarmPriority Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Processed {
            get {
                return this.ProcessedField;
            }
            set {
                if ((this.ProcessedField.Equals(value) != true)) {
                    this.ProcessedField = value;
                    this.RaisePropertyChanged("Processed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlarmPriority", Namespace="http://schemas.datacontract.org/2004/07/CoreService")]
    public enum AlarmPriority : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HI = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MED = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LO = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DBManagerServiceReference.IDBManagerService")]
    public interface IDBManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManagerService/ChangeOutputValue", ReplyAction="http://tempuri.org/IDBManagerService/ChangeOutputValueResponse")]
        bool ChangeOutputValue(string tagName, float newOutputValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManagerService/ChangeOutputValue", ReplyAction="http://tempuri.org/IDBManagerService/ChangeOutputValueResponse")]
        System.Threading.Tasks.Task<bool> ChangeOutputValueAsync(string tagName, float newOutputValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManagerService/GetOutputValue", ReplyAction="http://tempuri.org/IDBManagerService/GetOutputValueResponse")]
        System.Nullable<float> GetOutputValue(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManagerService/GetOutputValue", ReplyAction="http://tempuri.org/IDBManagerService/GetOutputValueResponse")]
        System.Threading.Tasks.Task<System.Nullable<float>> GetOutputValueAsync(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManagerService/SetScan", ReplyAction="http://tempuri.org/IDBManagerService/SetScanResponse")]
        bool SetScan(string tagName, bool scan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManagerService/SetScan", ReplyAction="http://tempuri.org/IDBManagerService/SetScanResponse")]
        System.Threading.Tasks.Task<bool> SetScanAsync(string tagName, bool scan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManagerService/AddTag", ReplyAction="http://tempuri.org/IDBManagerService/AddTagResponse")]
        bool AddTag(DatabaseManager.DBManagerServiceReference.Tag newTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManagerService/AddTag", ReplyAction="http://tempuri.org/IDBManagerService/AddTagResponse")]
        System.Threading.Tasks.Task<bool> AddTagAsync(DatabaseManager.DBManagerServiceReference.Tag newTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManagerService/RemoveTag", ReplyAction="http://tempuri.org/IDBManagerService/RemoveTagResponse")]
        bool RemoveTag(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManagerService/RemoveTag", ReplyAction="http://tempuri.org/IDBManagerService/RemoveTagResponse")]
        System.Threading.Tasks.Task<bool> RemoveTagAsync(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManagerService/RegisterUser", ReplyAction="http://tempuri.org/IDBManagerService/RegisterUserResponse")]
        bool RegisterUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManagerService/RegisterUser", ReplyAction="http://tempuri.org/IDBManagerService/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManagerService/LogIn", ReplyAction="http://tempuri.org/IDBManagerService/LogInResponse")]
        string LogIn(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManagerService/LogIn", ReplyAction="http://tempuri.org/IDBManagerService/LogInResponse")]
        System.Threading.Tasks.Task<string> LogInAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManagerService/LogOut", ReplyAction="http://tempuri.org/IDBManagerService/LogOutResponse")]
        bool LogOut(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManagerService/LogOut", ReplyAction="http://tempuri.org/IDBManagerService/LogOutResponse")]
        System.Threading.Tasks.Task<bool> LogOutAsync(string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDBManagerServiceChannel : DatabaseManager.DBManagerServiceReference.IDBManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DBManagerServiceClient : System.ServiceModel.ClientBase<DatabaseManager.DBManagerServiceReference.IDBManagerService>, DatabaseManager.DBManagerServiceReference.IDBManagerService {
        
        public DBManagerServiceClient() {
        }
        
        public DBManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DBManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool ChangeOutputValue(string tagName, float newOutputValue) {
            return base.Channel.ChangeOutputValue(tagName, newOutputValue);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeOutputValueAsync(string tagName, float newOutputValue) {
            return base.Channel.ChangeOutputValueAsync(tagName, newOutputValue);
        }
        
        public System.Nullable<float> GetOutputValue(string tagName) {
            return base.Channel.GetOutputValue(tagName);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<float>> GetOutputValueAsync(string tagName) {
            return base.Channel.GetOutputValueAsync(tagName);
        }
        
        public bool SetScan(string tagName, bool scan) {
            return base.Channel.SetScan(tagName, scan);
        }
        
        public System.Threading.Tasks.Task<bool> SetScanAsync(string tagName, bool scan) {
            return base.Channel.SetScanAsync(tagName, scan);
        }
        
        public bool AddTag(DatabaseManager.DBManagerServiceReference.Tag newTag) {
            return base.Channel.AddTag(newTag);
        }
        
        public System.Threading.Tasks.Task<bool> AddTagAsync(DatabaseManager.DBManagerServiceReference.Tag newTag) {
            return base.Channel.AddTagAsync(newTag);
        }
        
        public bool RemoveTag(string tagName) {
            return base.Channel.RemoveTag(tagName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveTagAsync(string tagName) {
            return base.Channel.RemoveTagAsync(tagName);
        }
        
        public bool RegisterUser(string username, string password) {
            return base.Channel.RegisterUser(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(string username, string password) {
            return base.Channel.RegisterUserAsync(username, password);
        }
        
        public string LogIn(string username, string password) {
            return base.Channel.LogIn(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LogInAsync(string username, string password) {
            return base.Channel.LogInAsync(username, password);
        }
        
        public bool LogOut(string token) {
            return base.Channel.LogOut(token);
        }
        
        public System.Threading.Tasks.Task<bool> LogOutAsync(string token) {
            return base.Channel.LogOutAsync(token);
        }
    }
}
